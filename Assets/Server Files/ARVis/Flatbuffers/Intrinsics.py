# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Flatbuffers

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Intrinsics(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Intrinsics()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIntrinsics(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Intrinsics
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Intrinsics
    def Focallength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from ARVis.Flatbuffers.Vec2 import Vec2
            obj = Vec2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Intrinsics
    def Principalpoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from ARVis.Flatbuffers.Vec2 import Vec2
            obj = Vec2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Intrinsics
    def Resolution(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from ARVis.Flatbuffers.Vec2Int import Vec2Int
            obj = Vec2Int()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Intrinsics
    def Skew(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def IntrinsicsStart(builder):
    builder.StartObject(4)

def Start(builder):
    IntrinsicsStart(builder)

def IntrinsicsAddFocallength(builder, focallength):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(focallength), 0)

def AddFocallength(builder, focallength):
    IntrinsicsAddFocallength(builder, focallength)

def IntrinsicsAddPrincipalpoint(builder, principalpoint):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(principalpoint), 0)

def AddPrincipalpoint(builder, principalpoint):
    IntrinsicsAddPrincipalpoint(builder, principalpoint)

def IntrinsicsAddResolution(builder, resolution):
    builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(resolution), 0)

def AddResolution(builder, resolution):
    IntrinsicsAddResolution(builder, resolution)

def IntrinsicsAddSkew(builder, skew):
    builder.PrependFloat32Slot(3, skew, 0.0)

def AddSkew(builder, skew):
    IntrinsicsAddSkew(builder, skew)

def IntrinsicsEnd(builder):
    return builder.EndObject()

def End(builder):
    return IntrinsicsEnd(builder)
