# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Flatbuffers

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Frame(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Frame()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFrame(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Frame
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Frame
    def Color(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Frame
    def ColorAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Frame
    def ColorLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Frame
    def ColorIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Frame
    def Intrinsics(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from ARVis.Flatbuffers.Intrinsics import Intrinsics
            obj = Intrinsics()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Frame
    def Colordistort(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Frame
    def ColordistortAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Frame
    def ColordistortLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Frame
    def ColordistortIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Frame
    def Depth(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Frame
    def DepthAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Frame
    def DepthLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Frame
    def DepthIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Frame
    def Depthdistort(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Frame
    def DepthdistortAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Frame
    def DepthdistortLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Frame
    def DepthdistortIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Frame
    def Pose(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from ARVis.Flatbuffers.Pose import Pose
            obj = Pose()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Frame
    def Tsus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

def FrameStart(builder):
    builder.StartObject(7)

def Start(builder):
    FrameStart(builder)

def FrameAddColor(builder, color):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)

def AddColor(builder, color):
    FrameAddColor(builder, color)

def FrameStartColorVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartColorVector(builder, numElems):
    return FrameStartColorVector(builder, numElems)

def FrameAddIntrinsics(builder, intrinsics):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(intrinsics), 0)

def AddIntrinsics(builder, intrinsics):
    FrameAddIntrinsics(builder, intrinsics)

def FrameAddColordistort(builder, colordistort):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(colordistort), 0)

def AddColordistort(builder, colordistort):
    FrameAddColordistort(builder, colordistort)

def FrameStartColordistortVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartColordistortVector(builder, numElems):
    return FrameStartColordistortVector(builder, numElems)

def FrameAddDepth(builder, depth):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(depth), 0)

def AddDepth(builder, depth):
    FrameAddDepth(builder, depth)

def FrameStartDepthVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartDepthVector(builder, numElems):
    return FrameStartDepthVector(builder, numElems)

def FrameAddDepthdistort(builder, depthdistort):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(depthdistort), 0)

def AddDepthdistort(builder, depthdistort):
    FrameAddDepthdistort(builder, depthdistort)

def FrameStartDepthdistortVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartDepthdistortVector(builder, numElems):
    return FrameStartDepthdistortVector(builder, numElems)

def FrameAddPose(builder, pose):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(pose), 0)

def AddPose(builder, pose):
    FrameAddPose(builder, pose)

def FrameAddTsus(builder, tsus):
    builder.PrependInt16Slot(6, tsus, 0)

def AddTsus(builder, tsus):
    FrameAddTsus(builder, tsus)

def FrameEnd(builder):
    return builder.EndObject()

def End(builder):
    return FrameEnd(builder)
