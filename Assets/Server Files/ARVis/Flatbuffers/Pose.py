# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Flatbuffers

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Pose(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Pose()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPose(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Pose
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Pose
    def Position(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Pose
    def PositionAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Pose
    def PositionLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Pose
    def PositionIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Pose
    def Rotation(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Pose
    def RotationAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Pose
    def RotationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Pose
    def RotationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def PoseStart(builder):
    builder.StartObject(2)

def Start(builder):
    PoseStart(builder)

def PoseAddPosition(builder, position):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def AddPosition(builder, position):
    PoseAddPosition(builder, position)

def PoseStartPositionVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPositionVector(builder, numElems):
    return PoseStartPositionVector(builder, numElems)

def PoseAddRotation(builder, rotation):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rotation), 0)

def AddRotation(builder, rotation):
    PoseAddRotation(builder, rotation)

def PoseStartRotationVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartRotationVector(builder, numElems):
    return PoseStartRotationVector(builder, numElems)

def PoseEnd(builder):
    return builder.EndObject()

def End(builder):
    return PoseEnd(builder)
