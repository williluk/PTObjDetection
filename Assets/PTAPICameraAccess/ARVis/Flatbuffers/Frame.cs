// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ARVis.Flatbuffers
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Frame : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Frame GetRootAsFrame(ByteBuffer _bb) { return GetRootAsFrame(_bb, new Frame()); }
  public static Frame GetRootAsFrame(ByteBuffer _bb, Frame obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyFrame(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, FrameVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Frame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Color(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int ColorLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetColorBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetColorBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetColorArray() { return __p.__vector_as_array<byte>(4); }
  public ARVis.Flatbuffers.Intrinsics? Intrinsics { get { int o = __p.__offset(6); return o != 0 ? (ARVis.Flatbuffers.Intrinsics?)(new ARVis.Flatbuffers.Intrinsics()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public byte Colordistort(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int ColordistortLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetColordistortBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetColordistortBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetColordistortArray() { return __p.__vector_as_array<byte>(8); }
  public byte Depth(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int DepthLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDepthBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDepthBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDepthArray() { return __p.__vector_as_array<byte>(10); }
  public byte Depthdistort(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int DepthdistortLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDepthdistortBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDepthdistortBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDepthdistortArray() { return __p.__vector_as_array<byte>(12); }
  public ARVis.Flatbuffers.Pose? Pose { get { int o = __p.__offset(14); return o != 0 ? (ARVis.Flatbuffers.Pose?)(new ARVis.Flatbuffers.Pose()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public short Tsus { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }

  public static Offset<ARVis.Flatbuffers.Frame> CreateFrame(FlatBufferBuilder builder,
      VectorOffset colorOffset = default(VectorOffset),
      Offset<ARVis.Flatbuffers.Intrinsics> intrinsicsOffset = default(Offset<ARVis.Flatbuffers.Intrinsics>),
      VectorOffset colordistortOffset = default(VectorOffset),
      VectorOffset depthOffset = default(VectorOffset),
      VectorOffset depthdistortOffset = default(VectorOffset),
      Offset<ARVis.Flatbuffers.Pose> poseOffset = default(Offset<ARVis.Flatbuffers.Pose>),
      short tsus = 0) {
    builder.StartTable(7);
    Frame.AddPose(builder, poseOffset);
    Frame.AddDepthdistort(builder, depthdistortOffset);
    Frame.AddDepth(builder, depthOffset);
    Frame.AddColordistort(builder, colordistortOffset);
    Frame.AddIntrinsics(builder, intrinsicsOffset);
    Frame.AddColor(builder, colorOffset);
    Frame.AddTsus(builder, tsus);
    return Frame.EndFrame(builder);
  }

  public static void StartFrame(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddColor(FlatBufferBuilder builder, VectorOffset colorOffset) { builder.AddOffset(0, colorOffset.Value, 0); }
  public static VectorOffset CreateColorVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateColorVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateColorVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateColorVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartColorVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddIntrinsics(FlatBufferBuilder builder, Offset<ARVis.Flatbuffers.Intrinsics> intrinsicsOffset) { builder.AddOffset(1, intrinsicsOffset.Value, 0); }
  public static void AddColordistort(FlatBufferBuilder builder, VectorOffset colordistortOffset) { builder.AddOffset(2, colordistortOffset.Value, 0); }
  public static VectorOffset CreateColordistortVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateColordistortVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateColordistortVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateColordistortVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartColordistortVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddDepth(FlatBufferBuilder builder, VectorOffset depthOffset) { builder.AddOffset(3, depthOffset.Value, 0); }
  public static VectorOffset CreateDepthVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDepthVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDepthVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDepthVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDepthVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddDepthdistort(FlatBufferBuilder builder, VectorOffset depthdistortOffset) { builder.AddOffset(4, depthdistortOffset.Value, 0); }
  public static VectorOffset CreateDepthdistortVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDepthdistortVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDepthdistortVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDepthdistortVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDepthdistortVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddPose(FlatBufferBuilder builder, Offset<ARVis.Flatbuffers.Pose> poseOffset) { builder.AddOffset(5, poseOffset.Value, 0); }
  public static void AddTsus(FlatBufferBuilder builder, short tsus) { builder.AddShort(6, tsus, 0); }
  public static Offset<ARVis.Flatbuffers.Frame> EndFrame(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ARVis.Flatbuffers.Frame>(o);
  }
  public static void FinishFrameBuffer(FlatBufferBuilder builder, Offset<ARVis.Flatbuffers.Frame> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedFrameBuffer(FlatBufferBuilder builder, Offset<ARVis.Flatbuffers.Frame> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class FrameVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Color*/, 1 /*byte*/, false)
      && verifier.VerifyTable(tablePos, 6 /*Intrinsics*/, ARVis.Flatbuffers.IntrinsicsVerify.Verify, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*Colordistort*/, 1 /*byte*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*Depth*/, 1 /*byte*/, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*Depthdistort*/, 1 /*byte*/, false)
      && verifier.VerifyTable(tablePos, 14 /*Pose*/, ARVis.Flatbuffers.PoseVerify.Verify, false)
      && verifier.VerifyField(tablePos, 16 /*Tsus*/, 2 /*short*/, 2, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
